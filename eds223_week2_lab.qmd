---
title: "eds223_week2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
install.packages("spData")
```

1. Set up

Install a new package to take advantage of some preloaded data.

```{r}
rm(list = ls())
library(sf) # for handling vector data
library(tmap) # for making maps
library(tidyverse) # because we love the tidyverse
library(spData) # preloaded spatial data
```

2. Simple features in sf

Simple features is a hierarchical data model that represents a wide range of geometry types. The sf package can represent all common vector geometry types:

points
lines
polygons
and their respective ‘multi’ versions
sfprovides the same functionality that the sp, rgdal, and rgeos packages provided, but is more intuitive because it builds on the tidy data model and works well with the tidyverse. sf represents spatial objects as “simple feature” objects by storing them as a data frame with the geographic data stored in a special column (usually named geom or geometry).

Simple features from scratch
Let’s start by looking at how we can construct a sf object. Typically we will load sf objects by reading in data. However, it can be helpful to see how sf objects are created from scratch.

First, we create a geometry for London by supplying a point and coordinate reference system.

```{r}
# create st_point with longitude and latitude for London
# simple feature geometry
london_point <- st_point(c(0.1, 51.5))

# add coordinate reference system
# simple feature collection
london_geom <- st_sfc(london_point, crs = 4326)
```

Then, we supply some non-geographic attributes by creating a data frame with attributes about London.

```{r}
london_attrib <- data.frame(
  name="London",
  temperature=25,
  date=as.Date("2017-06-21")
)
```

And we attach the simple feature collection and data frame to create a sf object. Check out the class of the new object we created.

```{r}
london_sf <- st_sf(london_attrib, geometry=london_geom)

class(london_sf) # check what class the sf object is. it's a dataframe

st_crs(london_sf) # check the coordinate reference system
st_crs(london_sf)$IsGeographic
```





Existing sf object
Now let’s look at an existing sf object representing countries of the world:

```{r}
world <- spData::world

names(world)
```

We can see that this object contains both spatial data (geom column) and attributes about those geometries. We can perform operations on the attribute data, just like we would with a normal data frame.

```{r}
summary(world$lifeExp)
```

The geometry column is “sticky”, meaning it will stick around unless we explicitly get rid of it. For example, dplyr’s select() function won’t get rid of it.

```{r}
world_df <- world %>%
  select(-geom)

colnames(world_df)
```

To drop the geom column and convert this sf object into a data frame, we need to drop the geometry column using the st_drop_geometry().

```{r}
world_df <- st_drop_geometry(world)
colnames(world_df)
```





3. Coordinate reference systems and projections

R handles coordinate reference systems using multiple formats:

an identifying string specifying the authority and code such as EPSG:4325
these need to be passed as strings
sf will accept the four digit code as an integer
proj4strings are now outdated, but you might see them around
for example, +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs


***Reprojecting data***
In some cases we will be working with data which is represented with different coordinate reference systems (CRS). Whenever we work with multiple spatial data objects, we need to check that the CRSs match.

Let’s create another sf object for London, but now represented with a project coordinate system.

```{r}
london_proj <- data.frame(x=53000, y=180000) %>%
  st_as_sf(coords = c("x", "y"), crs = "EPSG:27700")

st_crs(london_proj) == st_crs(london_sf)
```

To transform the CRS of a dataset, we use the st_transform() function. In the crs argument, we need to specify the coordinate reference system. We can do this by either supplying a CRS code or specifying the CRS of another dataset using the st_crs() function.

```{r}
london_sf_transform <- st_transform(london_sf, crs = st_crs(london_proj))
```

Now if we check, the CRS between the two datasets should match

```{r}
if(st_crs(london_sf_transform) == st_crs(london_proj)) {
  print("CRS Match")
} else {
  warning("CRS Mismatch")
}
```





Changing map projections
Remember that whenever we make a map we are trying to display three dimensional data with only two dimensions. To display 3D data in 2D, we use projections. Which projection you use can have big implications for how you display information.

To the projection of our data, we could:

reproject the underlying data
or in tmap we can specify the projection we want the map to use
Let’s compare global maps using two different projections:

Equal Earth is an equal-area pseudocylindrical projection (EPSG 8857)
Mercator is a conformal cylindrical map that preserves angles (EPSG 3395)

```{r}
tm_shape(world, projection = 8857) + 
  tm_fill(col = "area_km2")
```

```{r}
tm_shape(world, projection = 3395) + 
  tm_fill(col = "area_km2")
```




4. Vector attribute subsetting

Often we’ll want to manipulate sf objects in the same ways as we might with tabular data in data frames. The great thing about the simple features data model, is we can largely treat spatial objects the same as data frames.

dplyr functions!
This means that we can use all of our favorite dplyr functions on sf objects – yay!

We can select columns…

```{r}
# dplyr select

world %>%
  select(name_long, pop)

world %>%
  select(-subregion)

world %>%
  select(name=name_long, population=pop)
```

Or filter observations based on variables

```{r}
world <- world %>%
  filter(area_km2 < 10000)

world2 <- world %>%
  filter(lifeExp >= 80)

nrow(world2)
```

Chaining commands with pipes
Because we can use dplyr functions with sf objects, we can chain together commands using the pipe operator.

Let’s try to find the country in Asia with the highest life expectancy

```{r}
world %>%
  filter(continent == "Africa") %>%
  select(name_long, continent, lifeExp) %>%
  slice_max(lifeExp) %>%
  st_drop_geometry()
```


Vector attribute aggregation
Aggregation is the process of summarizing data with one or more ‘grouping’ variables. For example, using the ‘world’ which provides information on countries of the world, we might want to aggregate to the level of continents. It is important to note that aggregating data attributes is a different process from aggregating geographic data, which we will cover later.

Let’s try to find the total population within each continent:

```{r}
world %>%
  group_by(continent) %>%
  summarize(population = sum(pop, na.rm = TRUE)) %>%
  st_drop_geometry()
```



5. Joins with vector attributes

A critical part of many data science workflows is combining data sets based on common attributes. In R, we do this using multiple join functions, which follow SQL conventions.

Let’s start by looking a data set on national coffee production from the spData package:

```{r}
coffee_data <- spData::coffee_data
head(coffee_data)

nrow(coffee_data)
nrow(world)
```

The coffee production dataset does not include any spatial information, so If we wanted to make a map of coffee production, we would need to combine coffee_data with the world dataset. We do this by joining based on countries’ names.

```{r}
world <- spData::world

world_coffee <- left_join(world, coffee_data, by = "name_long")
names(world_coffee)
```

```{r}
tm_shape(world_coffee) + 
  tm_fill(col = "coffee_production_2017")
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data, by = "name_long")
```

```{r}
if (nrow(world_coffee_inner) != nrow(coffee_data)) {
  warning("inner join does not match original data. potential data loss during join")
}
```

```{r}
setdiff(coffee_data$name_long, world$name_long)
```

```{r}
drc <- stringr::str_subset(world$name_long, "Dem*.+Congo")
```

```{r}
coffee_data$name_long[stringr::str_detect(coffee_data$name_long, "Congo")] <- drc
```

```{r}
world_coffee_inner <- inner_join(world, coffee_data , by = "name_long")

# update warning message conditional to include the mismatch for "others"
if (nrow(world_coffee_inner) != nrow(coffee_data) & setdiff(coffee_data$name_long, world_coffee_inner$name_long) != "Others") {
  warning("inner join does not match original data. potential data loss during join")
}
```

```{r}
tm_shape(world_coffee_inner) +
  tm_polygons(fill = "coffee_production_2017",
              title = "Coffee production (2017)") +
  tm_layout(legend.outside = TRUE)
```












